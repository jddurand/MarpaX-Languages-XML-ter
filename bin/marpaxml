#!perl
use Getopt::Long;
use MarpaX::Languages::XML;
use Moops;
use Log::Any qw/$log/;
use Log::Any::Adapter;
use Log::Log4perl qw/:easy/;
use POSIX qw/EXIT_FAILURE EXIT_SUCCESS/;
use Try::Tiny;
use Types::Standard -all;
use XML::NamespaceSupport;

# ABSTRACT: Marpa/Moops powered XML parser in Perl

# VERSION

# AUTHORITY

# PODNAME: marpaxml

my $xml = MarpaX::Languages::XML->new_with_options;
__PACKAGE__->_init_log4perl($xml->loglevel);
$xml->parser->dispatcher->notify('AttValue_COMPLETE', [ {
                                                         origin => 'text',
                                                         context => 'document',
                                                         lastLexemes => {},
                                                         namespaceSupport => XML::NamespaceSupport->new()
                                                        } ]);

exit(EXIT_SUCCESS);

##################################################"

sub _init_log4perl {
  my ($class, $loglevel) = @_;

  my $defaultLog4perlConf = <<DEFAULT_LOG4PERL_CONF;
log4perl.rootLogger              = $loglevel, Screen
log4perl.appender.Screen         = Log::Log4perl::Appender::Screen
log4perl.appender.Screen.layout  = PatternLayout
log4perl.appender.Screen.layout.ConversionPattern = %d %-5p %6P %m{chomp}%n
DEFAULT_LOG4PERL_CONF
   Log::Log4perl::init(\$defaultLog4perlConf);
   Log::Any::Adapter->set('Log4perl');
}

